#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Sun Sep  8 18:38:52 2019 by generateDS.py version 2.33.1.
# Python 3.7.4+ (default, Sep  4 2019, 08:03:05)  [GCC 9.2.1 20190827]
#
# Command line options:
#   ('--external-encoding', 'utf-8')
#   ('-f', '')
#   ('-o', '../parsers/model.py')
#
# Command line arguments:
#   ../static/xsd/model.xsd
#
# Command line:
#   generateDS.py --external-encoding="utf-8" -f -o "../parsers/model.py" ../static/xsd/model.xsd
#
# Current working directory (os.getcwd()):
#   generateDS
#

import os
import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
import decimal as decimal_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# The super-class for enum types
#

try:
    from enum import Enum
except ImportError:
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires integer: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires float or double: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires sequence of floats')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return ('%0.10f' % input_data).rstrip('0')
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return input_data
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'requires float or double: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'requires boolean')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class nameType(Enum):
    ON_SCREEN='on_screen'
    PDF='pdf'
    TELEGRAM='telegram'
    CHATBOT='chatbot'
    EMAIL='email'


class Game(GeneratedsSuper):
    """El juego tiene recursos que deben estar contenidos dentro del comprimido
    para la importación y
    dentro de la ruta "resources/game/". Por ejemplo, si tenemos una
    ilustración para el juego llamada
    "juego.png" el atributo game_image será "resources/game/juego.png".
    Obviamente, el fichero físico
    tendrá que ir en esa ruta dentro del comprimido."""
    subclass = None
    superclass = None
    def __init__(self, course_id=None, name=None, description=None, published_date=None, is_published=None, game_image=None, case=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.course_id = _cast(int, course_id)
        self.course_id_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        if isinstance(published_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(published_date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = published_date
        self.published_date = initvalue_
        self.is_published = _cast(bool, is_published)
        self.is_published_nsprefix_ = None
        self.game_image = _cast(None, game_image)
        self.game_image_nsprefix_ = None
        if case is None:
            self.case = []
        else:
            self.case = case
        self.case_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Game)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Game.subclass:
            return Game.subclass(*args_, **kwargs_)
        else:
            return Game(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_case(self):
        return self.case
    def set_case(self, case):
        self.case = case
    def add_case(self, value):
        self.case.append(value)
    def insert_case_at(self, index, value):
        self.case.insert(index, value)
    def replace_case_at(self, index, value):
        self.case[index] = value
    def get_course_id(self):
        return self.course_id
    def set_course_id(self, course_id):
        self.course_id = course_id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_published_date(self):
        return self.published_date
    def set_published_date(self, published_date):
        self.published_date = published_date
    def get_is_published(self):
        return self.is_published
    def set_is_published(self, is_published):
        self.is_published = is_published
    def get_game_image(self):
        return self.game_image
    def set_game_image(self, game_image):
        self.game_image = game_image
    def hasContent_(self):
        if (
            self.case
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Game', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Game')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Game')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Game', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Game'):
        if 'course_id' not in already_processed:
            already_processed.add('course_id')
            outfile.write(' course_id="%s"' % self.gds_format_integer(self.course_id, input_name='course_id'))
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if self.published_date is not None and 'published_date' not in already_processed:
            already_processed.add('published_date')
            outfile.write(' published_date="%s"' % self.gds_format_datetime(self.published_date, input_name='published_date'))
        if 'is_published' not in already_processed:
            already_processed.add('is_published')
            outfile.write(' is_published="%s"' % self.gds_format_boolean(self.is_published, input_name='is_published'))
        if self.game_image is not None and 'game_image' not in already_processed:
            already_processed.add('game_image')
            outfile.write(' game_image=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.game_image), input_name='game_image')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Game', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for case_ in self.case:
            namespaceprefix_ = self.case_nsprefix_ + ':' if (UseCapturedNS_ and self.case_nsprefix_) else ''
            case_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='case', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('course_id', node)
        if value is not None and 'course_id' not in already_processed:
            already_processed.add('course_id')
            try:
                self.course_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('published_date', node)
        if value is not None and 'published_date' not in already_processed:
            already_processed.add('published_date')
            try:
                self.published_date = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (published_date): %s' % exp)
        value = find_attr_value_('is_published', node)
        if value is not None and 'is_published' not in already_processed:
            already_processed.add('is_published')
            if value in ('true', '1'):
                self.is_published = True
            elif value in ('false', '0'):
                self.is_published = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('game_image', node)
        if value is not None and 'game_image' not in already_processed:
            already_processed.add('game_image')
            self.game_image = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'case':
            obj_ = Case.factory(parent_object_=self)
            obj_.build(child_)
            self.case.append(obj_)
            obj_.original_tagname_ = 'case'
# end class Game


class Case(GeneratedsSuper):
    """Case se corresponde con un caso del juego. Los casos tienen recursos que
    deben estar contenidos
    dentro del comprimido para la importación y dentro de la ruta
    "resources/case/<case_name>/".
    Por ejemplo, si tenemos una ilustración para el caso llamada "caso1.png" y
    el Dockerfile base para este caso
    con el nombre "dockerfile_caso1" los atributos case_image y base_img_path
    serán
    "resources/case/<case_name>/caso1.png" y
    "resources/case/<case_name>/dockerfile_caso1" respectivamente.
    Obviamente, los ficheros físicos tendrán que ir en esa ruta dentro del
    comprimido."""
    subclass = None
    superclass = None
    def __init__(self, game_id=None, name=None, description=None, published_date=None, is_published=None, base_img_path=None, case_image=None, protocol='ssh', terminal_username=None, character=None, story=None, event=None, artifact=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.game_id = _cast(int, game_id)
        self.game_id_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        if isinstance(published_date, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(published_date, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = published_date
        self.published_date = initvalue_
        self.is_published = _cast(bool, is_published)
        self.is_published_nsprefix_ = None
        self.base_img_path = _cast(None, base_img_path)
        self.base_img_path_nsprefix_ = None
        self.case_image = _cast(None, case_image)
        self.case_image_nsprefix_ = None
        self.protocol = _cast(None, protocol)
        self.protocol_nsprefix_ = None
        self.terminal_username = _cast(None, terminal_username)
        self.terminal_username_nsprefix_ = None
        if character is None:
            self.character = []
        else:
            self.character = character
        self.character_nsprefix_ = None
        self.story = story
        self.story_nsprefix_ = None
        if event is None:
            self.event = []
        else:
            self.event = event
        self.event_nsprefix_ = None
        if artifact is None:
            self.artifact = []
        else:
            self.artifact = artifact
        self.artifact_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Case)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Case.subclass:
            return Case.subclass(*args_, **kwargs_)
        else:
            return Case(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_character(self):
        return self.character
    def set_character(self, character):
        self.character = character
    def add_character(self, value):
        self.character.append(value)
    def insert_character_at(self, index, value):
        self.character.insert(index, value)
    def replace_character_at(self, index, value):
        self.character[index] = value
    def get_story(self):
        return self.story
    def set_story(self, story):
        self.story = story
    def get_event(self):
        return self.event
    def set_event(self, event):
        self.event = event
    def add_event(self, value):
        self.event.append(value)
    def insert_event_at(self, index, value):
        self.event.insert(index, value)
    def replace_event_at(self, index, value):
        self.event[index] = value
    def get_artifact(self):
        return self.artifact
    def set_artifact(self, artifact):
        self.artifact = artifact
    def add_artifact(self, value):
        self.artifact.append(value)
    def insert_artifact_at(self, index, value):
        self.artifact.insert(index, value)
    def replace_artifact_at(self, index, value):
        self.artifact[index] = value
    def get_game_id(self):
        return self.game_id
    def set_game_id(self, game_id):
        self.game_id = game_id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_published_date(self):
        return self.published_date
    def set_published_date(self, published_date):
        self.published_date = published_date
    def get_is_published(self):
        return self.is_published
    def set_is_published(self, is_published):
        self.is_published = is_published
    def get_base_img_path(self):
        return self.base_img_path
    def set_base_img_path(self, base_img_path):
        self.base_img_path = base_img_path
    def get_case_image(self):
        return self.case_image
    def set_case_image(self, case_image):
        self.case_image = case_image
    def get_protocol(self):
        return self.protocol
    def set_protocol(self, protocol):
        self.protocol = protocol
    def get_terminal_username(self):
        return self.terminal_username
    def set_terminal_username(self, terminal_username):
        self.terminal_username = terminal_username
    def hasContent_(self):
        if (
            self.character or
            self.story is not None or
            self.event or
            self.artifact
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Case', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Case')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Case')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Case', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Case'):
        if self.game_id is not None and 'game_id' not in already_processed:
            already_processed.add('game_id')
            outfile.write(' game_id="%s"' % self.gds_format_integer(self.game_id, input_name='game_id'))
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if self.published_date is not None and 'published_date' not in already_processed:
            already_processed.add('published_date')
            outfile.write(' published_date="%s"' % self.gds_format_datetime(self.published_date, input_name='published_date'))
        if 'is_published' not in already_processed:
            already_processed.add('is_published')
            outfile.write(' is_published="%s"' % self.gds_format_boolean(self.is_published, input_name='is_published'))
        if 'base_img_path' not in already_processed:
            already_processed.add('base_img_path')
            outfile.write(' base_img_path=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.base_img_path), input_name='base_img_path')), ))
        if self.case_image is not None and 'case_image' not in already_processed:
            already_processed.add('case_image')
            outfile.write(' case_image=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.case_image), input_name='case_image')), ))
        if self.protocol != "ssh" and 'protocol' not in already_processed:
            already_processed.add('protocol')
            outfile.write(' protocol=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.protocol), input_name='protocol')), ))
        if self.terminal_username is not None and 'terminal_username' not in already_processed:
            already_processed.add('terminal_username')
            outfile.write(' terminal_username=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.terminal_username), input_name='terminal_username')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Case', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for character_ in self.character:
            namespaceprefix_ = self.character_nsprefix_ + ':' if (UseCapturedNS_ and self.character_nsprefix_) else ''
            character_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='character', pretty_print=pretty_print)
        if self.story is not None:
            namespaceprefix_ = self.story_nsprefix_ + ':' if (UseCapturedNS_ and self.story_nsprefix_) else ''
            self.story.export(outfile, level, namespaceprefix_, namespacedef_='', name_='story', pretty_print=pretty_print)
        for event_ in self.event:
            namespaceprefix_ = self.event_nsprefix_ + ':' if (UseCapturedNS_ and self.event_nsprefix_) else ''
            event_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='event', pretty_print=pretty_print)
        for artifact_ in self.artifact:
            namespaceprefix_ = self.artifact_nsprefix_ + ':' if (UseCapturedNS_ and self.artifact_nsprefix_) else ''
            artifact_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='artifact', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('game_id', node)
        if value is not None and 'game_id' not in already_processed:
            already_processed.add('game_id')
            try:
                self.game_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('published_date', node)
        if value is not None and 'published_date' not in already_processed:
            already_processed.add('published_date')
            try:
                self.published_date = self.gds_parse_datetime(value)
            except ValueError as exp:
                raise ValueError('Bad date-time attribute (published_date): %s' % exp)
        value = find_attr_value_('is_published', node)
        if value is not None and 'is_published' not in already_processed:
            already_processed.add('is_published')
            if value in ('true', '1'):
                self.is_published = True
            elif value in ('false', '0'):
                self.is_published = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('base_img_path', node)
        if value is not None and 'base_img_path' not in already_processed:
            already_processed.add('base_img_path')
            self.base_img_path = value
        value = find_attr_value_('case_image', node)
        if value is not None and 'case_image' not in already_processed:
            already_processed.add('case_image')
            self.case_image = value
        value = find_attr_value_('protocol', node)
        if value is not None and 'protocol' not in already_processed:
            already_processed.add('protocol')
            self.protocol = value
        value = find_attr_value_('terminal_username', node)
        if value is not None and 'terminal_username' not in already_processed:
            already_processed.add('terminal_username')
            self.terminal_username = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'character':
            obj_ = Character.factory(parent_object_=self)
            obj_.build(child_)
            self.character.append(obj_)
            obj_.original_tagname_ = 'character'
        elif nodeName_ == 'story':
            obj_ = Story.factory(parent_object_=self)
            obj_.build(child_)
            self.story = obj_
            obj_.original_tagname_ = 'story'
        elif nodeName_ == 'event':
            obj_ = Event.factory(parent_object_=self)
            obj_.build(child_)
            self.event.append(obj_)
            obj_.original_tagname_ = 'event'
        elif nodeName_ == 'artifact':
            obj_ = Artifact.factory(parent_object_=self)
            obj_.build(child_)
            self.artifact.append(obj_)
            obj_.original_tagname_ = 'artifact'
# end class Case


class Character(GeneratedsSuper):
    """Los Character son los personajes con los que el jugador podrá
    interactuar por alguno de los
    tipos de historia. Los personajes pueden tener un avatar, en cuyo caso la
    ruta al fichero estará indicada
    en el elemento 'avatar_path'. En el caso de que se añada avatar, dicho
    archivo tendrá que estar contenido
    en el comprimido en la ruta indicada en el elemento avatar_path.
    Por ejemplo, si tenemos un avatar para el personaje llamado "avatar1.png"
    el atributo 'avatar_path' serán
    "resources/case/<case_name>/characters/avatar1.png". Obviamente, los
    ficheros físicos tendrán que ir en esa
    ruta dentro del comprimido."""
    subclass = None
    superclass = None
    def __init__(self, character_key=None, name=None, full_name=None, mail_address=None, avatar_path=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.character_key = _cast(None, character_key)
        self.character_key_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.full_name = _cast(None, full_name)
        self.full_name_nsprefix_ = None
        self.mail_address = _cast(None, mail_address)
        self.mail_address_nsprefix_ = None
        self.avatar_path = _cast(None, avatar_path)
        self.avatar_path_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Character)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Character.subclass:
            return Character.subclass(*args_, **kwargs_)
        else:
            return Character(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_character_key(self):
        return self.character_key
    def set_character_key(self, character_key):
        self.character_key = character_key
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_full_name(self):
        return self.full_name
    def set_full_name(self, full_name):
        self.full_name = full_name
    def get_mail_address(self):
        return self.mail_address
    def set_mail_address(self, mail_address):
        self.mail_address = mail_address
    def get_avatar_path(self):
        return self.avatar_path
    def set_avatar_path(self, avatar_path):
        self.avatar_path = avatar_path
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Character', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Character')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Character')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Character', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Character'):
        if 'character_key' not in already_processed:
            already_processed.add('character_key')
            outfile.write(' character_key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.character_key), input_name='character_key')), ))
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if 'full_name' not in already_processed:
            already_processed.add('full_name')
            outfile.write(' full_name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.full_name), input_name='full_name')), ))
        if self.mail_address is not None and 'mail_address' not in already_processed:
            already_processed.add('mail_address')
            outfile.write(' mail_address=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.mail_address), input_name='mail_address')), ))
        if self.avatar_path is not None and 'avatar_path' not in already_processed:
            already_processed.add('avatar_path')
            outfile.write(' avatar_path=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.avatar_path), input_name='avatar_path')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Character', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('character_key', node)
        if value is not None and 'character_key' not in already_processed:
            already_processed.add('character_key')
            self.character_key = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('full_name', node)
        if value is not None and 'full_name' not in already_processed:
            already_processed.add('full_name')
            self.full_name = value
        value = find_attr_value_('mail_address', node)
        if value is not None and 'mail_address' not in already_processed:
            already_processed.add('mail_address')
            self.mail_address = value
        value = find_attr_value_('avatar_path', node)
        if value is not None and 'avatar_path' not in already_processed:
            already_processed.add('avatar_path')
            self.avatar_path = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Character


class Message(GeneratedsSuper):
    """Los mensajes pueden contener simplemente texto, el cual irá en el
    elemento 'plane_text', o bien,
    pueden ser un fichero como por ejemplo un PDF. En ese caso la ruta al
    fichero estará indicada en el elemento
    'file_path'.
    En el caso de que sea un fichero, dicho archivo tendrá que estar contenido
    en el comprimido en la ruta
    indicada en el elemento file_path.
    Por ejemplo, si tenemos un PDF para el mensaje llamado "mensaje1.pdf" el
    atributo 'file_path' serán
    "resources/case/<case_name>/messages/mensaje1.pdf". Obviamente, los
    ficheros físicos tendrán que ir en esa
    ruta dentro del comprimido."""
    subclass = None
    superclass = None
    def __init__(self, order=1, delay_to_show=0, character_key=None, plane_text=None, file_path=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.order = _cast(int, order)
        self.order_nsprefix_ = None
        self.delay_to_show = _cast(int, delay_to_show)
        self.delay_to_show_nsprefix_ = None
        self.character_key = _cast(None, character_key)
        self.character_key_nsprefix_ = None
        self.plane_text = plane_text
        self.plane_text_nsprefix_ = None
        self.file_path = file_path
        self.file_path_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Message)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Message.subclass:
            return Message.subclass(*args_, **kwargs_)
        else:
            return Message(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_plane_text(self):
        return self.plane_text
    def set_plane_text(self, plane_text):
        self.plane_text = plane_text
    def get_file_path(self):
        return self.file_path
    def set_file_path(self, file_path):
        self.file_path = file_path
    def get_order(self):
        return self.order
    def set_order(self, order):
        self.order = order
    def get_delay_to_show(self):
        return self.delay_to_show
    def set_delay_to_show(self, delay_to_show):
        self.delay_to_show = delay_to_show
    def get_character_key(self):
        return self.character_key
    def set_character_key(self, character_key):
        self.character_key = character_key
    def hasContent_(self):
        if (
            self.plane_text is not None or
            self.file_path is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Message', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Message')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Message')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Message', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Message'):
        if self.order != 1 and 'order' not in already_processed:
            already_processed.add('order')
            outfile.write(' order="%s"' % self.gds_format_integer(self.order, input_name='order'))
        if self.delay_to_show != 0 and 'delay_to_show' not in already_processed:
            already_processed.add('delay_to_show')
            outfile.write(' delay_to_show="%s"' % self.gds_format_integer(self.delay_to_show, input_name='delay_to_show'))
        if self.character_key is not None and 'character_key' not in already_processed:
            already_processed.add('character_key')
            outfile.write(' character_key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.character_key), input_name='character_key')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Message', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.plane_text is not None:
            namespaceprefix_ = self.plane_text_nsprefix_ + ':' if (UseCapturedNS_ and self.plane_text_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%splane_text>%s</%splane_text>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.plane_text), input_name='plane_text')), namespaceprefix_ , eol_))
        if self.file_path is not None:
            namespaceprefix_ = self.file_path_nsprefix_ + ':' if (UseCapturedNS_ and self.file_path_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfile_path>%s</%sfile_path>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.file_path), input_name='file_path')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('order', node)
        if value is not None and 'order' not in already_processed:
            already_processed.add('order')
            try:
                self.order = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('delay_to_show', node)
        if value is not None and 'delay_to_show' not in already_processed:
            already_processed.add('delay_to_show')
            try:
                self.delay_to_show = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('character_key', node)
        if value is not None and 'character_key' not in already_processed:
            already_processed.add('character_key')
            self.character_key = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'plane_text':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'plane_text')
            value_ = self.gds_validate_string(value_, node, 'plane_text')
            self.plane_text = value_
            self.plane_text_nsprefix_ = child_.prefix
        elif nodeName_ == 'file_path':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'file_path')
            value_ = self.gds_validate_string(value_, node, 'file_path')
            self.file_path = value_
            self.file_path_nsprefix_ = child_.prefix
# end class Message


class Story(GeneratedsSuper):
    """Story es un fragmento de la historia del caso."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, story_type_id=None, message=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.story_type_id = _cast(int, story_type_id)
        self.story_type_id_nsprefix_ = None
        if message is None:
            self.message = []
        else:
            self.message = message
        self.message_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Story)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Story.subclass:
            return Story.subclass(*args_, **kwargs_)
        else:
            return Story(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_message(self):
        return self.message
    def set_message(self, message):
        self.message = message
    def add_message(self, value):
        self.message.append(value)
    def insert_message_at(self, index, value):
        self.message.insert(index, value)
    def replace_message_at(self, index, value):
        self.message[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_story_type_id(self):
        return self.story_type_id
    def set_story_type_id(self, story_type_id):
        self.story_type_id = story_type_id
    def hasContent_(self):
        if (
            self.message
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Story', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Story')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Story')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Story', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Story'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if 'story_type_id' not in already_processed:
            already_processed.add('story_type_id')
            outfile.write(' story_type_id="%s"' % self.gds_format_integer(self.story_type_id, input_name='story_type_id'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Story', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for message_ in self.message:
            namespaceprefix_ = self.message_nsprefix_ + ':' if (UseCapturedNS_ and self.message_nsprefix_) else ''
            message_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='message', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('story_type_id', node)
        if value is not None and 'story_type_id' not in already_processed:
            already_processed.add('story_type_id')
            try:
                self.story_type_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'message':
            obj_ = Message.factory(parent_object_=self)
            obj_.build(child_)
            self.message.append(obj_)
            obj_.original_tagname_ = 'message'
# end class Story


class StoryType(GeneratedsSuper):
    """Story Type identifica el tipo de historia para los valores
    permitidos."""
    subclass = None
    superclass = None
    def __init__(self, id=None, name=None, description=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.id = _cast(int, id)
        self.id_nsprefix_ = None
        self.name = name
        self.validate_nameType(self.name)
        self.name_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, StoryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if StoryType.subclass:
            return StoryType.subclass(*args_, **kwargs_)
        else:
            return StoryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_id(self):
        return self.id
    def set_id(self, id):
        self.id = id
    def validate_nameType(self, value):
        # Validate type nameType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['on_screen', 'pdf', 'telegram', 'chatbot', 'email']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on nameType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.name is not None or
            self.description is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='StoryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('StoryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='StoryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='StoryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='StoryType'):
        if 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id="%s"' % self.gds_format_integer(self.id, input_name='id'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='StoryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            namespaceprefix_ = self.name_nsprefix_ + ':' if (UseCapturedNS_ and self.name_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sname>%s</%sname>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            try:
                self.id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'name')
            value_ = self.gds_validate_string(value_, node, 'name')
            self.name = value_
            self.name_nsprefix_ = child_.prefix
            # validate type nameType
            self.validate_nameType(self.name)
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
# end class StoryType


class Event(GeneratedsSuper):
    """Los eventos son las distintas misiones que hay dentro del caso. Cada una
    de ellas puede tener
    una historia inicial y puede tener otra a su fin.
    Los eventos están precedidos de otros eventos, cuya finalización da pie al
    inicio del nuevo. Este flujo
    de eventos se indica con el atributo 'event_key' del evento previo, cuyo
    valor debe ir en el atributo
    'previous_event_key' del siguiente evento."""
    subclass = None
    superclass = None
    def __init__(self, event_key=None, case_id=None, name=None, description=None, previous_event_key=None, previous_event_id=None, delay_start=None, onfinish_cancel_active_events=False, event_intro_story=None, event_end_story=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.event_key = _cast(None, event_key)
        self.event_key_nsprefix_ = None
        self.case_id = _cast(int, case_id)
        self.case_id_nsprefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.previous_event_key = _cast(None, previous_event_key)
        self.previous_event_key_nsprefix_ = None
        self.previous_event_id = _cast(int, previous_event_id)
        self.previous_event_id_nsprefix_ = None
        self.delay_start = _cast(int, delay_start)
        self.delay_start_nsprefix_ = None
        self.onfinish_cancel_active_events = _cast(bool, onfinish_cancel_active_events)
        self.onfinish_cancel_active_events_nsprefix_ = None
        self.event_intro_story = event_intro_story
        self.event_intro_story_nsprefix_ = None
        self.event_end_story = event_end_story
        self.event_end_story_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Event)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Event.subclass:
            return Event.subclass(*args_, **kwargs_)
        else:
            return Event(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_event_intro_story(self):
        return self.event_intro_story
    def set_event_intro_story(self, event_intro_story):
        self.event_intro_story = event_intro_story
    def get_event_end_story(self):
        return self.event_end_story
    def set_event_end_story(self, event_end_story):
        self.event_end_story = event_end_story
    def get_event_key(self):
        return self.event_key
    def set_event_key(self, event_key):
        self.event_key = event_key
    def get_case_id(self):
        return self.case_id
    def set_case_id(self, case_id):
        self.case_id = case_id
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_previous_event_key(self):
        return self.previous_event_key
    def set_previous_event_key(self, previous_event_key):
        self.previous_event_key = previous_event_key
    def get_previous_event_id(self):
        return self.previous_event_id
    def set_previous_event_id(self, previous_event_id):
        self.previous_event_id = previous_event_id
    def get_delay_start(self):
        return self.delay_start
    def set_delay_start(self, delay_start):
        self.delay_start = delay_start
    def get_onfinish_cancel_active_events(self):
        return self.onfinish_cancel_active_events
    def set_onfinish_cancel_active_events(self, onfinish_cancel_active_events):
        self.onfinish_cancel_active_events = onfinish_cancel_active_events
    def hasContent_(self):
        if (
            self.event_intro_story is not None or
            self.event_end_story is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Event', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Event')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Event')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Event', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Event'):
        if self.event_key is not None and 'event_key' not in already_processed:
            already_processed.add('event_key')
            outfile.write(' event_key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.event_key), input_name='event_key')), ))
        if self.case_id is not None and 'case_id' not in already_processed:
            already_processed.add('case_id')
            outfile.write(' case_id="%s"' % self.gds_format_integer(self.case_id, input_name='case_id'))
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if self.previous_event_key is not None and 'previous_event_key' not in already_processed:
            already_processed.add('previous_event_key')
            outfile.write(' previous_event_key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.previous_event_key), input_name='previous_event_key')), ))
        if self.previous_event_id is not None and 'previous_event_id' not in already_processed:
            already_processed.add('previous_event_id')
            outfile.write(' previous_event_id="%s"' % self.gds_format_integer(self.previous_event_id, input_name='previous_event_id'))
        if self.delay_start is not None and 'delay_start' not in already_processed:
            already_processed.add('delay_start')
            outfile.write(' delay_start="%s"' % self.gds_format_integer(self.delay_start, input_name='delay_start'))
        if self.onfinish_cancel_active_events and 'onfinish_cancel_active_events' not in already_processed:
            already_processed.add('onfinish_cancel_active_events')
            outfile.write(' onfinish_cancel_active_events="%s"' % self.gds_format_boolean(self.onfinish_cancel_active_events, input_name='onfinish_cancel_active_events'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Event', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.event_intro_story is not None:
            namespaceprefix_ = self.event_intro_story_nsprefix_ + ':' if (UseCapturedNS_ and self.event_intro_story_nsprefix_) else ''
            self.event_intro_story.export(outfile, level, namespaceprefix_, namespacedef_='', name_='event_intro_story', pretty_print=pretty_print)
        if self.event_end_story is not None:
            namespaceprefix_ = self.event_end_story_nsprefix_ + ':' if (UseCapturedNS_ and self.event_end_story_nsprefix_) else ''
            self.event_end_story.export(outfile, level, namespaceprefix_, namespacedef_='', name_='event_end_story', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('event_key', node)
        if value is not None and 'event_key' not in already_processed:
            already_processed.add('event_key')
            self.event_key = value
        value = find_attr_value_('case_id', node)
        if value is not None and 'case_id' not in already_processed:
            already_processed.add('case_id')
            try:
                self.case_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('previous_event_key', node)
        if value is not None and 'previous_event_key' not in already_processed:
            already_processed.add('previous_event_key')
            self.previous_event_key = value
        value = find_attr_value_('previous_event_id', node)
        if value is not None and 'previous_event_id' not in already_processed:
            already_processed.add('previous_event_id')
            try:
                self.previous_event_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('delay_start', node)
        if value is not None and 'delay_start' not in already_processed:
            already_processed.add('delay_start')
            try:
                self.delay_start = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('onfinish_cancel_active_events', node)
        if value is not None and 'onfinish_cancel_active_events' not in already_processed:
            already_processed.add('onfinish_cancel_active_events')
            if value in ('true', '1'):
                self.onfinish_cancel_active_events = True
            elif value in ('false', '0'):
                self.onfinish_cancel_active_events = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'event_intro_story':
            obj_ = Story.factory(parent_object_=self)
            obj_.build(child_)
            self.event_intro_story = obj_
            obj_.original_tagname_ = 'event_intro_story'
        elif nodeName_ == 'event_end_story':
            obj_ = Story.factory(parent_object_=self)
            obj_.build(child_)
            self.event_end_story = obj_
            obj_.original_tagname_ = 'event_end_story'
# end class Event


class ArtifactType(GeneratedsSuper):
    """Tipos de artefactos soportados."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ArtifactType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ArtifactType.subclass:
            return ArtifactType.subclass(*args_, **kwargs_)
        else:
            return ArtifactType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ArtifactType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ArtifactType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ArtifactType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ArtifactType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ArtifactType'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ArtifactType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ArtifactType


class Artifact(GeneratedsSuper):
    """Artefactos contienen claves (hiddenInfos) que son las que aportan
    puntuación y pueden solventar eventos.
    Los artefactos pueden estar asociados a distintos eventos, event_key sirve
    para asociarlo con el evento
    que tenga el mismo valor en su campo correspondiente."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, path=None, artifact_type=None, hidden_info=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.path = _cast(None, path)
        self.path_nsprefix_ = None
        self.artifact_type = artifact_type
        self.artifact_type_nsprefix_ = None
        if hidden_info is None:
            self.hidden_info = []
        else:
            self.hidden_info = hidden_info
        self.hidden_info_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Artifact)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Artifact.subclass:
            return Artifact.subclass(*args_, **kwargs_)
        else:
            return Artifact(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_artifact_type(self):
        return self.artifact_type
    def set_artifact_type(self, artifact_type):
        self.artifact_type = artifact_type
    def get_hidden_info(self):
        return self.hidden_info
    def set_hidden_info(self, hidden_info):
        self.hidden_info = hidden_info
    def add_hidden_info(self, value):
        self.hidden_info.append(value)
    def insert_hidden_info_at(self, index, value):
        self.hidden_info.insert(index, value)
    def replace_hidden_info_at(self, index, value):
        self.hidden_info[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_path(self):
        return self.path
    def set_path(self, path):
        self.path = path
    def hasContent_(self):
        if (
            self.artifact_type is not None or
            self.hidden_info
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Artifact', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Artifact')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Artifact')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Artifact', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Artifact'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if self.path is not None and 'path' not in already_processed:
            already_processed.add('path')
            outfile.write(' path=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.path), input_name='path')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Artifact', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.artifact_type is not None:
            namespaceprefix_ = self.artifact_type_nsprefix_ + ':' if (UseCapturedNS_ and self.artifact_type_nsprefix_) else ''
            self.artifact_type.export(outfile, level, namespaceprefix_, namespacedef_='', name_='artifact_type', pretty_print=pretty_print)
        for hidden_info_ in self.hidden_info:
            namespaceprefix_ = self.hidden_info_nsprefix_ + ':' if (UseCapturedNS_ and self.hidden_info_nsprefix_) else ''
            hidden_info_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='hidden_info', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('path', node)
        if value is not None and 'path' not in already_processed:
            already_processed.add('path')
            self.path = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'artifact_type':
            obj_ = ArtifactType.factory(parent_object_=self)
            obj_.build(child_)
            self.artifact_type = obj_
            obj_.original_tagname_ = 'artifact_type'
        elif nodeName_ == 'hidden_info':
            obj_ = HiddenInfo.factory(parent_object_=self)
            obj_.build(child_)
            self.hidden_info.append(obj_)
            obj_.original_tagname_ = 'hidden_info'
# end class Artifact


class HiddenInfo(GeneratedsSuper):
    """Este elemento determina el tipo de información oculta y la puntuación a
    asignar al alumno por obtenerla."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, hiding_type_id=None, score=0, event_key=None, is_event_key_info=None, common_key_code=None, prefix_key_code=None, suffix_key_code=None, random_key_code_word=None, random_word_maxlength=None, toolParamValue=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.hiding_type_id = _cast(int, hiding_type_id)
        self.hiding_type_id_nsprefix_ = None
        self.score = _cast(int, score)
        self.score_nsprefix_ = None
        self.event_key = _cast(None, event_key)
        self.event_key_nsprefix_ = None
        self.is_event_key_info = _cast(bool, is_event_key_info)
        self.is_event_key_info_nsprefix_ = None
        self.common_key_code = _cast(None, common_key_code)
        self.common_key_code_nsprefix_ = None
        self.prefix_key_code = _cast(None, prefix_key_code)
        self.prefix_key_code_nsprefix_ = None
        self.suffix_key_code = _cast(None, suffix_key_code)
        self.suffix_key_code_nsprefix_ = None
        self.random_key_code_word = _cast(bool, random_key_code_word)
        self.random_key_code_word_nsprefix_ = None
        self.random_word_maxlength = _cast(int, random_word_maxlength)
        self.random_word_maxlength_nsprefix_ = None
        if toolParamValue is None:
            self.toolParamValue = []
        else:
            self.toolParamValue = toolParamValue
        self.toolParamValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HiddenInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HiddenInfo.subclass:
            return HiddenInfo.subclass(*args_, **kwargs_)
        else:
            return HiddenInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_toolParamValue(self):
        return self.toolParamValue
    def set_toolParamValue(self, toolParamValue):
        self.toolParamValue = toolParamValue
    def add_toolParamValue(self, value):
        self.toolParamValue.append(value)
    def insert_toolParamValue_at(self, index, value):
        self.toolParamValue.insert(index, value)
    def replace_toolParamValue_at(self, index, value):
        self.toolParamValue[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_hiding_type_id(self):
        return self.hiding_type_id
    def set_hiding_type_id(self, hiding_type_id):
        self.hiding_type_id = hiding_type_id
    def get_score(self):
        return self.score
    def set_score(self, score):
        self.score = score
    def get_event_key(self):
        return self.event_key
    def set_event_key(self, event_key):
        self.event_key = event_key
    def get_is_event_key_info(self):
        return self.is_event_key_info
    def set_is_event_key_info(self, is_event_key_info):
        self.is_event_key_info = is_event_key_info
    def get_common_key_code(self):
        return self.common_key_code
    def set_common_key_code(self, common_key_code):
        self.common_key_code = common_key_code
    def get_prefix_key_code(self):
        return self.prefix_key_code
    def set_prefix_key_code(self, prefix_key_code):
        self.prefix_key_code = prefix_key_code
    def get_suffix_key_code(self):
        return self.suffix_key_code
    def set_suffix_key_code(self, suffix_key_code):
        self.suffix_key_code = suffix_key_code
    def get_random_key_code_word(self):
        return self.random_key_code_word
    def set_random_key_code_word(self, random_key_code_word):
        self.random_key_code_word = random_key_code_word
    def get_random_word_maxlength(self):
        return self.random_word_maxlength
    def set_random_word_maxlength(self, random_word_maxlength):
        self.random_word_maxlength = random_word_maxlength
    def hasContent_(self):
        if (
            self.toolParamValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='HiddenInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HiddenInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HiddenInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HiddenInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HiddenInfo'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if 'hiding_type_id' not in already_processed:
            already_processed.add('hiding_type_id')
            outfile.write(' hiding_type_id="%s"' % self.gds_format_integer(self.hiding_type_id, input_name='hiding_type_id'))
        if self.score != 0 and 'score' not in already_processed:
            already_processed.add('score')
            outfile.write(' score="%s"' % self.gds_format_integer(self.score, input_name='score'))
        if self.event_key is not None and 'event_key' not in already_processed:
            already_processed.add('event_key')
            outfile.write(' event_key=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.event_key), input_name='event_key')), ))
        if 'is_event_key_info' not in already_processed:
            already_processed.add('is_event_key_info')
            outfile.write(' is_event_key_info="%s"' % self.gds_format_boolean(self.is_event_key_info, input_name='is_event_key_info'))
        if self.common_key_code is not None and 'common_key_code' not in already_processed:
            already_processed.add('common_key_code')
            outfile.write(' common_key_code=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.common_key_code), input_name='common_key_code')), ))
        if self.prefix_key_code is not None and 'prefix_key_code' not in already_processed:
            already_processed.add('prefix_key_code')
            outfile.write(' prefix_key_code=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.prefix_key_code), input_name='prefix_key_code')), ))
        if self.suffix_key_code is not None and 'suffix_key_code' not in already_processed:
            already_processed.add('suffix_key_code')
            outfile.write(' suffix_key_code=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.suffix_key_code), input_name='suffix_key_code')), ))
        if self.random_key_code_word is not None and 'random_key_code_word' not in already_processed:
            already_processed.add('random_key_code_word')
            outfile.write(' random_key_code_word="%s"' % self.gds_format_boolean(self.random_key_code_word, input_name='random_key_code_word'))
        if self.random_word_maxlength is not None and 'random_word_maxlength' not in already_processed:
            already_processed.add('random_word_maxlength')
            outfile.write(' random_word_maxlength="%s"' % self.gds_format_integer(self.random_word_maxlength, input_name='random_word_maxlength'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='HiddenInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for toolParamValue_ in self.toolParamValue:
            namespaceprefix_ = self.toolParamValue_nsprefix_ + ':' if (UseCapturedNS_ and self.toolParamValue_nsprefix_) else ''
            toolParamValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='toolParamValue', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('hiding_type_id', node)
        if value is not None and 'hiding_type_id' not in already_processed:
            already_processed.add('hiding_type_id')
            try:
                self.hiding_type_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('score', node)
        if value is not None and 'score' not in already_processed:
            already_processed.add('score')
            try:
                self.score = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('event_key', node)
        if value is not None and 'event_key' not in already_processed:
            already_processed.add('event_key')
            self.event_key = value
        value = find_attr_value_('is_event_key_info', node)
        if value is not None and 'is_event_key_info' not in already_processed:
            already_processed.add('is_event_key_info')
            if value in ('true', '1'):
                self.is_event_key_info = True
            elif value in ('false', '0'):
                self.is_event_key_info = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('common_key_code', node)
        if value is not None and 'common_key_code' not in already_processed:
            already_processed.add('common_key_code')
            self.common_key_code = value
        value = find_attr_value_('prefix_key_code', node)
        if value is not None and 'prefix_key_code' not in already_processed:
            already_processed.add('prefix_key_code')
            self.prefix_key_code = value
        value = find_attr_value_('suffix_key_code', node)
        if value is not None and 'suffix_key_code' not in already_processed:
            already_processed.add('suffix_key_code')
            self.suffix_key_code = value
        value = find_attr_value_('random_key_code_word', node)
        if value is not None and 'random_key_code_word' not in already_processed:
            already_processed.add('random_key_code_word')
            if value in ('true', '1'):
                self.random_key_code_word = True
            elif value in ('false', '0'):
                self.random_key_code_word = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('random_word_maxlength', node)
        if value is not None and 'random_word_maxlength' not in already_processed:
            already_processed.add('random_word_maxlength')
            try:
                self.random_word_maxlength = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'toolParamValue':
            obj_ = ToolParamValue.factory(parent_object_=self)
            obj_.build(child_)
            self.toolParamValue.append(obj_)
            obj_.original_tagname_ = 'toolParamValue'
# end class HiddenInfo


class ToolParamValue(GeneratedsSuper):
    """Valor para el parámetro de una herramienta."""
    subclass = None
    superclass = None
    def __init__(self, param_id=None, tool_id=None, value='', add_key_code=False, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.param_id = _cast(int, param_id)
        self.param_id_nsprefix_ = None
        self.tool_id = _cast(int, tool_id)
        self.tool_id_nsprefix_ = None
        self.value = _cast(None, value)
        self.value_nsprefix_ = None
        self.add_key_code = _cast(bool, add_key_code)
        self.add_key_code_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ToolParamValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ToolParamValue.subclass:
            return ToolParamValue.subclass(*args_, **kwargs_)
        else:
            return ToolParamValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_param_id(self):
        return self.param_id
    def set_param_id(self, param_id):
        self.param_id = param_id
    def get_tool_id(self):
        return self.tool_id
    def set_tool_id(self, tool_id):
        self.tool_id = tool_id
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_add_key_code(self):
        return self.add_key_code
    def set_add_key_code(self, add_key_code):
        self.add_key_code = add_key_code
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ToolParamValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ToolParamValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ToolParamValue')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ToolParamValue', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ToolParamValue'):
        if 'param_id' not in already_processed:
            already_processed.add('param_id')
            outfile.write(' param_id="%s"' % self.gds_format_integer(self.param_id, input_name='param_id'))
        if 'tool_id' not in already_processed:
            already_processed.add('tool_id')
            outfile.write(' tool_id="%s"' % self.gds_format_integer(self.tool_id, input_name='tool_id'))
        if self.value != "" and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.value), input_name='value')), ))
        if self.add_key_code and 'add_key_code' not in already_processed:
            already_processed.add('add_key_code')
            outfile.write(' add_key_code="%s"' % self.gds_format_boolean(self.add_key_code, input_name='add_key_code'))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ToolParamValue', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('param_id', node)
        if value is not None and 'param_id' not in already_processed:
            already_processed.add('param_id')
            try:
                self.param_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('tool_id', node)
        if value is not None and 'tool_id' not in already_processed:
            already_processed.add('tool_id')
            try:
                self.tool_id = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('add_key_code', node)
        if value is not None and 'add_key_code' not in already_processed:
            already_processed.add('add_key_code')
            if value in ('true', '1'):
                self.add_key_code = True
            elif value in ('false', '0'):
                self.add_key_code = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ToolParamValue


class HidingType(GeneratedsSuper):
    """Determina los tipos de ocultación de información."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, HidingType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if HidingType.subclass:
            return HidingType.subclass(*args_, **kwargs_)
        else:
            return HidingType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='HidingType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('HidingType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='HidingType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='HidingType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='HidingType'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='HidingType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class HidingType


class Tools(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, tool=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if tool is None:
            self.tool = []
        else:
            self.tool = tool
        self.tool_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Tools)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Tools.subclass:
            return Tools.subclass(*args_, **kwargs_)
        else:
            return Tools(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_tool(self):
        return self.tool
    def set_tool(self, tool):
        self.tool = tool
    def add_tool(self, value):
        self.tool.append(value)
    def insert_tool_at(self, index, value):
        self.tool.insert(index, value)
    def replace_tool_at(self, index, value):
        self.tool[index] = value
    def hasContent_(self):
        if (
            self.tool
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Tools', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Tools')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Tools')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Tools', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Tools'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Tools', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for tool_ in self.tool:
            namespaceprefix_ = self.tool_nsprefix_ + ':' if (UseCapturedNS_ and self.tool_nsprefix_) else ''
            tool_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='tool', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'tool':
            obj_ = Tool.factory(parent_object_=self)
            obj_.build(child_)
            self.tool.append(obj_)
            obj_.original_tagname_ = 'tool'
# end class Tools


class Tool(GeneratedsSuper):
    """Tool indica una herramienta para ocultar información dentro de algún
    elemento."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, command=None, hiding_type=None, parameter=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.command = _cast(None, command)
        self.command_nsprefix_ = None
        if hiding_type is None:
            self.hiding_type = []
        else:
            self.hiding_type = hiding_type
        self.hiding_type_nsprefix_ = None
        if parameter is None:
            self.parameter = []
        else:
            self.parameter = parameter
        self.parameter_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Tool)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Tool.subclass:
            return Tool.subclass(*args_, **kwargs_)
        else:
            return Tool(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_hiding_type(self):
        return self.hiding_type
    def set_hiding_type(self, hiding_type):
        self.hiding_type = hiding_type
    def add_hiding_type(self, value):
        self.hiding_type.append(value)
    def insert_hiding_type_at(self, index, value):
        self.hiding_type.insert(index, value)
    def replace_hiding_type_at(self, index, value):
        self.hiding_type[index] = value
    def get_parameter(self):
        return self.parameter
    def set_parameter(self, parameter):
        self.parameter = parameter
    def add_parameter(self, value):
        self.parameter.append(value)
    def insert_parameter_at(self, index, value):
        self.parameter.insert(index, value)
    def replace_parameter_at(self, index, value):
        self.parameter[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_command(self):
        return self.command
    def set_command(self, command):
        self.command = command
    def hasContent_(self):
        if (
            self.hiding_type or
            self.parameter
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Tool', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Tool')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Tool')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Tool', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Tool'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if 'command' not in already_processed:
            already_processed.add('command')
            outfile.write(' command=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.command), input_name='command')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Tool', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for hiding_type_ in self.hiding_type:
            namespaceprefix_ = self.hiding_type_nsprefix_ + ':' if (UseCapturedNS_ and self.hiding_type_nsprefix_) else ''
            hiding_type_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='hiding_type', pretty_print=pretty_print)
        for parameter_ in self.parameter:
            namespaceprefix_ = self.parameter_nsprefix_ + ':' if (UseCapturedNS_ and self.parameter_nsprefix_) else ''
            parameter_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='parameter', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('command', node)
        if value is not None and 'command' not in already_processed:
            already_processed.add('command')
            self.command = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'hiding_type':
            obj_ = HidingType.factory(parent_object_=self)
            obj_.build(child_)
            self.hiding_type.append(obj_)
            obj_.original_tagname_ = 'hiding_type'
        elif nodeName_ == 'parameter':
            obj_ = ToolParameter.factory(parent_object_=self)
            obj_.build(child_)
            self.parameter.append(obj_)
            obj_.original_tagname_ = 'parameter'
# end class Tool


class ToolParameter(GeneratedsSuper):
    """Contiene parámetros para una herramienta."""
    subclass = None
    superclass = None
    def __init__(self, name=None, description=None, parameter=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.description = _cast(None, description)
        self.description_nsprefix_ = None
        self.parameter = _cast(None, parameter)
        self.parameter_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ToolParameter)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ToolParameter.subclass:
            return ToolParameter.subclass(*args_, **kwargs_)
        else:
            return ToolParameter(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_parameter(self):
        return self.parameter
    def set_parameter(self, parameter):
        self.parameter = parameter
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ToolParameter', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ToolParameter')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ToolParameter')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ToolParameter', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ToolParameter'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.description), input_name='description')), ))
        if 'parameter' not in already_processed:
            already_processed.add('parameter')
            outfile.write(' parameter=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.parameter), input_name='parameter')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='ToolParameter', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('parameter', node)
        if value is not None and 'parameter' not in already_processed:
            already_processed.add('parameter')
            self.parameter = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class ToolParameter


class Department(GeneratedsSuper):
    """El departamento contiene las asignaturas."""
    subclass = None
    superclass = None
    def __init__(self, name=None, url=None, course=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.url = _cast(None, url)
        self.url_nsprefix_ = None
        if course is None:
            self.course = []
        else:
            self.course = course
        self.course_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Department)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Department.subclass:
            return Department.subclass(*args_, **kwargs_)
        else:
            return Department(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_course(self):
        return self.course
    def set_course(self, course):
        self.course = course
    def add_course(self, value):
        self.course.append(value)
    def insert_course_at(self, index, value):
        self.course.insert(index, value)
    def replace_course_at(self, index, value):
        self.course[index] = value
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_url(self):
        return self.url
    def set_url(self, url):
        self.url = url
    def hasContent_(self):
        if (
            self.course
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Department', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Department')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Department')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Department', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Department'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.url is not None and 'url' not in already_processed:
            already_processed.add('url')
            outfile.write(' url=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.url), input_name='url')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Department', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for course_ in self.course:
            namespaceprefix_ = self.course_nsprefix_ + ':' if (UseCapturedNS_ and self.course_nsprefix_) else ''
            course_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='course', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('url', node)
        if value is not None and 'url' not in already_processed:
            already_processed.add('url')
            self.url = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'course':
            obj_ = Course.factory(parent_object_=self)
            obj_.build(child_)
            self.course.append(obj_)
            obj_.original_tagname_ = 'course'
# end class Department


class Course(GeneratedsSuper):
    """Course se corresponde con una asignatura. Las asignaturas tienen
    recursos que deben estar
    contenidos dentro del comprimido para la importación y dentro de la ruta
    "resources/courses/". Por ejemplo, si tenemos una ilustración para la
    asignatura llamada
    "seguridad.png" el atributo course_image serán
    "resources/courses/seguridad.png".
    Obviamente, los ficheros físicos tendrán que ir en esa ruta dentro del
    comprimido."""
    subclass = None
    superclass = None
    def __init__(self, name=None, acronym=None, course_image=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.name = _cast(None, name)
        self.name_nsprefix_ = None
        self.acronym = _cast(None, acronym)
        self.acronym_nsprefix_ = None
        self.course_image = _cast(None, course_image)
        self.course_image_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, Course)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if Course.subclass:
            return Course.subclass(*args_, **kwargs_)
        else:
            return Course(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_name(self):
        return self.name
    def set_name(self, name):
        self.name = name
    def get_acronym(self):
        return self.acronym
    def set_acronym(self, acronym):
        self.acronym = acronym
    def get_course_image(self):
        return self.course_image
    def set_course_image(self, course_image):
        self.course_image = course_image
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Course', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('Course')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='Course')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='Course', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='Course'):
        if 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.name), input_name='name')), ))
        if self.acronym is not None and 'acronym' not in already_processed:
            already_processed.add('acronym')
            outfile.write(' acronym=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.acronym), input_name='acronym')), ))
        if self.course_image is not None and 'course_image' not in already_processed:
            already_processed.add('course_image')
            outfile.write(' course_image=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.course_image), input_name='course_image')), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='xmlns:game="https://game.sherlock_holmes.com"', name_='Course', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('acronym', node)
        if value is not None and 'acronym' not in already_processed:
            already_processed.add('acronym')
            self.acronym = value
        value = find_attr_value_('course_image', node)
        if value is not None and 'course_image' not in already_processed:
            already_processed.add('course_image')
            self.course_image = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class Course


GDSClassesMapping = {
    'artifact': Artifact,
    'artifact_type': ArtifactType,
    'case': Case,
    'department': Department,
    'event': Event,
    'game': Game,
    'hidden_info': HiddenInfo,
    'hiding_type': HidingType,
    'story': Story,
    'story_type': StoryType,
    'tool': Tool,
    'tools': Tools,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False):
    global CapturedNsmap_
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Game'
        rootClass = Game
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Game'
        rootClass = Game
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Game'
        rootClass = Game
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:game="https://game.sherlock_holmes.com"')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Game'
        rootClass = Game
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from model import *\n\n')
        sys.stdout.write('import model as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

__all__ = [
    "Artifact",
    "ArtifactType",
    "Case",
    "Character",
    "Course",
    "Department",
    "Event",
    "Game",
    "HiddenInfo",
    "HidingType",
    "Message",
    "Story",
    "StoryType",
    "Tool",
    "ToolParamValue",
    "ToolParameter",
    "Tools"
]
